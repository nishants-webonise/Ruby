   -----------------------
   *** Ruby Assignment ***
   -----------------------

String 1 :
RUBY parses a file by looking for <br/> one of the special tags that tells it to start interpreting the text as RUBY code. The parser then executes all of the code it finds until it runs into a RUBY closing <br/> tag.

String 2 :
RUBY does not require (or support) explicit type definition in variable declaration; a variable's type is determined by the context in which the variable is used.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------

webonise@webonise-desktop:~/Documents/Ruby$ irb

irb(main):001:0> string_one="RUBY parses a file by looking for <br/> one of the special tags that tells it to start interpreting the text as RUBY code. The parser the executes all of the code it finds until it runs into a RUBY closing <br/> tag."
=> "RUBY parses a file by looking for <br/> one of the special tags that tells it to start interpreting the text as RUBY code. The parser then executes all of the code it finds until it runs into a RUBY closing <br/> tag."

irb(main):004:0> string_one.class
=> String

irb(main):007:0> string_two="RUBY does not require (or support) explicit type definition in variable declaration; a variable's type is determined by the context in which the variable is used."
=> "RUBY does not require (or support) explicit type definition in variable declaration; a variable's type is determined by the context in which the variable is used."

irb(main):008:0> string_two.class
=> String
------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-----------------
Questions-Answers
-----------------

1. Find occurrence of RUBY from string 1.

irb(main):008:0> string_one.scan(/RUBY/)
=> ["RUBY", "RUBY", "RUBY"]

irb(main):009:0> string_one.scan(/RUBY/).count()
=> 3
----------xxx----------

2. Find the positions where RUBY occurs in the string 1.

irb(main):019:0> string_one.enum_for(:scan, /RUBY/).map { Regexp.last_match.begin(0) }
=> [0, 112, 194]
----------xxx----------

3. Create array of words in string 1 & print them using a recursive function.

irb(main):022:0> arr=string_one.split(' ')
=> ["RUBY", "parses", "a", "file", "by", "looking", "for", "<br/>", "one", "of", "the", "special", "tags", "that", "tells", "it", "to", "start", "interpreting", "the", "text", "as", "RUBY", "code.", "The", "parser", "then", "executes", "all", "of", "the", "code", "it", "finds", "until", "it", "runs", "into", "a", "RUBY", "closing", "<br/>", "tag."]

irb(main):023:0> arr.each do |i|
irb(main):024:1* puts i
irb(main):025:1> end
RUBY
parses
a
file
by
looking
for
<br/>
one
of
the
special
tags
that
tells
it
to
start
interpreting
the
text
as
RUBY
code.
The
parser
then
executes
all
of
the
code
it
finds
until
it
runs
into
a
RUBY
closing
<br/>
tag.
=> ["RUBY", "parses", "a", "file", "by", "looking", "for", "<br/>", "one", "of", "the", "special", "tags", "that", "tells", "it", "to", "start", "interpreting", "the", "text", "as", "RUBY", "code.", "The", "parser", "then", "executes", "all", "of", "the", "code", "it", "finds", "until", "it", "runs", "into", "a", "RUBY", "closing", "<br/>", "tag."]

-----
OR
-----

irb(main):034:0> p arr
["RUBY", "parses", "a", "file", "by", "looking", "for", "<br/>", "one", "of", "the", "special", "tags", "that", "tells", "it", "to", "start", "interpreting", "the", "text", "as", "RUBY", "code.", "The", "parser", "then", "executes", "all", "of", "the", "code", "it", "finds", "until", "it", "runs", "into", "a", "RUBY", "closing", "<br/>", "tag."]
=> nil
----------xxx----------

4. Capitalise string 1.

irb(main):043:0> string_one.capitalize()
=> "Ruby parses a file by looking for <br/> one of the special tags that tells it to start interpreting the text as ruby code. the parser then executes all of the code it finds until it runs into a ruby closing <br/> tag."

-----
OR
-----

irb(main):046:0> string_one.upcase()
=> "RUBY PARSES A FILE BY LOOKING FOR <BR/> ONE OF THE SPECIAL TAGS THAT TELLS IT TO START INTERPRETING THE TEXT AS RUBY CODE. THE PARSER THEN EXECUTES ALL OF THE CODE IT FINDS UNTIL IT RUNS INTO A RUBY CLOSING <BR/> TAG."
----------xxx----------

5. Combine string 1 & 2.

irb(main):047:0> string_one+string_two
=> "RUBY parses a file by looking for <br/> one of the special tags that tells it to start interpreting the text as RUBY code. The parser then executes all of the code it finds until it runs into a RUBY closing <br/> tag.RUBY does not require (or support) explicit type definition in variable declaration; a variable's type is determined by the context in which the variable is used."

-----
OR
-----

irb(main):048:0> string_one.concat(string_two)
=> "RUBY parses a file by looking for <br/> one of the special tags that tells it to start interpreting the text as RUBY code. The parser then executes all of the code it finds until it runs into a RUBY closing <br/> tag.RUBY does not require (or support) explicit type definition in variable declaration; a variable's type is determined by the context in which the variable is used."
----------xxx----------

6. Print string 1 & 2 using heredoc.

irb(main):001:0> here_doc=<<EOF
irb(main):002:0" 
irb(main):003:0" RUBY parses a file by looking for <br/> one of the special tags that tells it to start interpreting the text as RUBY code. The parser the executes all of the code it finds until it runs into a RUBY closing <br/> tag.
irb(main):004:0" RUBY does not require (or support) explicit type definition in variable declaration; a variable's type is determined by the context in which the variable is used.
irb(main):005:0" EOF
=> "\nRUBY parses a file by looking for <br/> one of the special tags that tells it to start interpreting the text as RUBY code. The parser the executes all of the code it finds until it runs into a RUBY closing <br/> tag.\nRUBY does not require (or support) explicit type definition in variable declaration; a variable's type is determined by the context in which the variable is used.\n"
----------xxx----------

7. Print current date.

irb(main):001:0> require 'date'
=> true
irb(main):002:0> Date.today.to_s
=> "2012-12-13"

-----
OR
-----

irb(main):006:0> Time.now.strftime("%d/%m/%Y")
=> "13/12/2012"
----------xxx----------

8. print 12th Jan 2012.

irb(main):001:0> t=Time.now
=> Thu Dec 13 18:08:09 +0530 2012

irb(main):003:0> t.strftime("12th Jan %y")
=> "12th Jan 12"
----------xxx----------

9. Add 7 days in current date.

irb(main):001:0> Time.now + (1*7*24*60*60)
=> Thu Dec 20 18:21:08 +0530 2012
----------xxx----------

10. Cut the string 1 into 4 parts & print it.

irb(main):002:0> string_one.split(' ',4)
=> ["RUBY", "parses", "a", "file by looking for <br/> one of the special tags that tells it to start interpreting the text as RUBY code. The parser the executes all of the code it finds until it runs into a RUBY closing <br/> tag."]

*** into 4 equal parts

1.9.3p327 :001 > arr = Array.new
 => []

1.9.3p327 :003 > arr[0] = string_one[0..(string_one.length/4)]
 => "RUBY parses a file by looking for <br/> one of the spec" 

1.9.3p327 :004 > for x in 1..3
1.9.3p327 :005?>   arr[x] = string_one[(string_one.length * x/4)+1 .. (string_one.length * (x+1)/4)]
1.9.3p327 :006?>   end
 => 1..3 

1.9.3p327 :007 > p arr
["RUBY parses a file by looking for <br/> one of the spec", "ial tags that tells it to start interpreting the text ", "as RUBY code. The parser the executes all of the code ", "it finds until it runs into a RUBY closing <br/> tag."]
 => ["RUBY parses a file by looking for <br/> one of the spec", "ial tags that tells it to start interpreting the text ", "as RUBY code. The parser the executes all of the code ", "it finds until it runs into a RUBY closing <br/> tag."] 

----------xxx----------

11. Divide the string 1 by occurances of '.'. Combine the array in reverse word sequence.

irb(main):002:0> arr=string_one.reverse()
=> ".gat >/rb< gnisolc YBUR a otni snur ti litnu sdnif ti edoc eht fo lla setucexe eht resrap ehT .edoc YBUR sa txet eht gniterpretni trats ot ti sllet taht sgat laiceps eht fo eno >/rb< rof gnikool yb elif a sesrap YBUR"

irb(main):003:0> arr.each do |i|
irb(main):004:1* puts i
irb(main):005:1> end
.gat >/rb< gnisolc YBUR a otni snur ti litnu sdnif ti edoc eht fo lla setucexe eht resrap ehT .edoc YBUR sa txet eht gniterpretni trats ot ti sllet taht sgat laiceps eht fo eno >/rb< rof gnikool yb elif a sesrap YBUR
=> ".gat >/rb< gnisolc YBUR a otni snur ti litnu sdnif ti edoc eht fo lla setucexe eht resrap ehT .edoc YBUR sa txet eht gniterpretni trats ot ti sllet taht sgat laiceps eht fo eno >/rb< rof gnikool yb elif a sesrap YBUR"
----------xxx----------

12. Remove the HTML characters from string.

irb(main):011:0> string_one.gsub(/<\/?[^>]*>/, '')
=> "RUBY parses a file by looking for  one of the special tags that tells it to start interpreting the text as RUBY code. The parser the executes all of the code it finds until it runs into a RUBY closing  tag."
----------xxx----------

13. Print the 'RUBY' word from string 1 by traversing it using string functions.

irb(main):008:0> string_one.scan(/RUBY/)
=> ["RUBY", "RUBY", "RUBY"]
----------xxx----------

14. Find the length of string 1 & 2.

irb(main):006:0> string_one.length
=> 217

irb(main):009:0> string_two.length
=> 162
----------xxx----------

15. Create file & write string 1 to that file using RUBY functions.

irb(main):012:0> aFile = File.new("/home/webonise/Documents/Ruby/abc.rb", "w+")
=> #<File:/home/webonise/Documents/Ruby/abc.rb>

irb(main):013:0> if aFile
irb(main):014:1> aFile.syswrite(string_one)
irb(main):015:1> else
irb(main):016:1* puts "Cannot open file"
irb(main):017:1> end
=> 216

irb(main):018:0> aFile.close
=> nil
----------xxx----------

16. Print all Global varibles provided by RUBY.

irb(main):001:0> puts global_variables
$-w
$:
$.
$KCODE
$-F
$*
$stderr
$,
$`
$binding
$-p
$"
$$
$<
$@
$-v
$-i
$deferr
$\
$=
$;
$PROGRAM_NAME
$stdout
$&
$-d
$LOAD_PATH
$-a
$VERBOSE
$FILENAME
$defout
$-0
$+
$0
$stdin
$~
$DEBUG
$-I
$_
$-K
$>
$/
$'
$-l
$LOADED_FEATURES
$?
$SAFE
$!
=> nil
----------xxx----------

17. Usage and examples of Header (RUBY).

----------xxx----------

18. Redirect page 1 to page 2.

----------xxx----------

19. Compare two dates. (12-4-2010 & 12-5-2011). Calculate the days between these two dates.

irb(main):020:0> gap = Time.local(2011, 05, 12) - Time.local(2010, 04, 12)
=> 34128000.0

irb(main):021:0> gap = gap/(60*60*24)
=> 395.0
----------xxx----------

20. Print date after 20 days from current date.

irb(main):022:0> Time.now + (1*20*24*60*60)
=> Wed Jan 02 19:27:40 +0530 2013
----------xxx----------

21. Print date in array format.

irb(main):025:0> date=Time.new
=> Thu Dec 13 19:30:17 +0530 2012
irb(main):026:0> values=date.to_a
=> [17, 30, 19, 13, 12, 2012, 4, 348, false, "IST"]
----------xxx----------
